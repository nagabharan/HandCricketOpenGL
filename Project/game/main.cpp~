#include <stdlib.h>
#include <sys/time.h>
#include <iostream>
#include <stdio.h>
#include <math.h>
#include <GL/glut.h>
using namespace std;

int sw = 1370;
int sh = 768;

GLuint hand[2];
GLuint pl[2];
GLuint texID1,texID2,texID3,texID4;

int p[3],target,o,score,w1,w2,w3,mile,out,e;
int stat[60]={0},bc=0,i;

double getftime(void ){
    struct timeval tv;
    gettimeofday(&tv, NULL);
    return tv.tv_sec + tv.tv_usec*1e-6;
}
static double lasttime;
double finishtime, delta_t;

int ran(){
	int a;
	do{
        a=rand();
        a=a*rand()%1000+rand()%100;
        a=a/rand()%1000+rand()%100;
        a=a*rand()%1000+rand()%100;
        a%=6;
        a++;
	}while(a==0||a<0);
	return a;
}

GLuint LoadTexture1(char* file)   //cpu
{
	GLuint texId1 = SOIL_load_OGL_texture(file, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y | SOIL_FLAG_MIPMAPS);
	glBindTexture(GL_TEXTURE_2D, pl[0]);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
	return texId1;
}

GLuint LoadTexture2(char* file)   //human
{
	GLuint texId1 = SOIL_load_OGL_texture(file, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y | SOIL_FLAG_MIPMAPS);
	glBindTexture(GL_TEXTURE_2D, pl[1]);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
	return texId1;
}

GLuint LoadTexture3(char* file)   //lefthand
{
	GLuint texId1 = SOIL_load_OGL_texture(file, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y | SOIL_FLAG_MIPMAPS);
	glBindTexture(GL_TEXTURE_2D, hand[0]);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
	return texId1;
}

GLuint LoadTexture4(char* file)   //right hand
{
	GLuint texId1 = SOIL_load_OGL_texture(file, SOIL_LOAD_AUTO, SOIL_CREATE_NEW_ID, SOIL_FLAG_INVERT_Y | SOIL_FLAG_MIPMAPS);
	glBindTexture(GL_TEXTURE_2D, hand[1]);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
	return texId1;
}

void LoadGameGLTextures() {

    char *a="img/0l.bmp",*b="img/0r.bmp",*c="img/cpu.bmp",*d="img/human.bmp";

    texID1 = LoadTexture1((char*)("a"));
    texID2 = LoadTexture2((char*)("b"));
    texID3 = LoadTexture3((char*)("c"));
    texID4 = LoadTexture4((char*)("d"));

};


void drawNumber(int n,float x,float y,float z,float a){
    char *c,string[50];
    glPushMatrix();
    glTranslatef(x-19.5,y-10,z);
    glScalef(.5*a,.5*a,z);
    int b=sprintf (string, " %d ",n);
    for (c=string; *c != '\0'; c++)
        glutStrokeCharacter(GLUT_STROKE_ROMAN , *c);
    glPopMatrix();
}

void drawText(char*string,int x,int y,int z,float a){
    char *c;
    glPushMatrix();
    glTranslatef(x,y,z);
    glScalef(.5*a,.5*a,z);
    for (c=string; *c != '\0'; c++)
        glutStrokeCharacter(GLUT_STROKE_ROMAN , *c);
    glPopMatrix();
}

void anim(int n1,int n2){

    char a[30],b[30];

    switch(n1){
    case 1:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    case 2:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    case 3:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    case 4:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    case 5:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    case 6:
            sprintf(a,"img/%dl.bmp",n1);
            break;
    default:
            cout<<"Invalid File\n";
    }
    switch(n2){
    case 1:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    case 2:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    case 3:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    case 4:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    case 5:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    case 6:
            sprintf(b,"img/%dr.bmp",n2);
            break;
    default:
            cout<<"Invalid File\n";
    }

    texID1 = LoadTexture3((char*)("a"));
    texID2 = LoadTexture4((char*)("b"));

    glBindTexture(GL_TEXTURE_2D, hand[0]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(450,500);
    glTexCoord2i(1,0); glVertex2i(450,100);
    glTexCoord2i(0,0); glVertex2i(50,100);
    glTexCoord2i(0,1); glVertex2i(50,500);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, hand[1]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(900,500);
    glTexCoord2i(1,0); glVertex2i(900,100);
    glTexCoord2i(0,0); glVertex2i(500,100);
    glTexCoord2i(0,1); glVertex2i(500,500);
    glEnd();

    glutPostRedisplay();

}

void gamedisp11(){

    glBindTexture(GL_TEXTURE_2D, hand[0]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(450,500);
    glTexCoord2i(1,0); glVertex2i(450,200);
    glTexCoord2i(0,0); glVertex2i(50,200);
    glTexCoord2i(0,1); glVertex2i(50,500);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, hand[1]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(900,500);
    glTexCoord2i(1,0); glVertex2i(900,200);
    glTexCoord2i(0,0); glVertex2i(500,200);
    glTexCoord2i(0,1); glVertex2i(500,500);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, pl[0]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(200,625);
    glTexCoord2i(1,0); glVertex2i(200,525);
    glTexCoord2i(0,0); glVertex2i(300,525);
    glTexCoord2i(0,1); glVertex2i(300,625);
    glEnd();

    glBindTexture(GL_TEXTURE_2D, pl[1]);
    glBegin(GL_QUADS);
    glTexCoord2i(1,1); glVertex2i(750,625);
    glTexCoord2i(1,0); glVertex2i(750,525);
    glTexCoord2i(0,0); glVertex2i(650,525);
    glTexCoord2i(0,1); glVertex2i(650,625);
    glEnd();

    glColor3f(1,0,0);
    drawText("CPU",150,650,0,1.25);
    drawText("CPU",151,650,0,1.25);
    drawText("CPU",152,650,0,1.25);

    drawText("HUMAN",570,650,0,1.25);
    drawText("HUMAN",571,650,0,1.25);
    drawText("HUMAN",572,650,0,1.25);

    drawText("BALLS LEFT",330,550,0,.75);
    drawText("BALLS LEFT",331,550,0,.75);
    drawText("BALLS LEFT",332,550,0,.75);

    drawNumber(30-bc,400,625,0,1);

    if(out){

        drawText("OUT",135,75,0,.5);
        drawText("OUT",136,75,0,.5);
        drawText("OUT",137,75,0,.5);

    }

    if(mile){

        drawText("CONGRATS",305,75,0,.5);
        drawText("CONGRATS",306,75,0,.5);
        drawText("CONGRATS",307,75,0,.5);
        mile=0;
    }

    if(w1){

        drawText("USER WIN",355,75,0,1);
        drawText("USER WIN",356,75,0,1);
        drawText("USER WIN",357,75,0,1);
        drawText("Press Space to exit",300,25,0,.5);
        e=1;
    }

    if(w2){

        drawText("CPU WIN",325,75,0,1);
        drawText("CPU WIN",326,75,0,1);
        drawText("CPU WIN",327,75,0,1);
        drawText("Press Space to exit",300,25,0,.5);
        e=1;
    }

    if(w3){

        drawText("DRAW",325,75,0,1);
        drawText("DRAW",326,75,0,1);
        drawText("DRAW",327,75,0,1);
        drawText("Press Space to exit",300,25,0,.5);
        e=1;
    }
}

void gamedisp21(){
    //1
    glBegin(GL_POLYGON);
    glVertex2d(1000,650);
    glVertex2d(1125,650);
    glVertex2d(1125,700);
    glVertex2d(1000,700);
    glEnd();
    //2
    glBegin(GL_POLYGON);
    glVertex2d(1175,650);
    glVertex2d(1300,650);
    glVertex2d(1300,700);
    glVertex2d(1175,700);
    glEnd();
    //3
    glBegin(GL_POLYGON);
    glVertex2d(1000,550);
    glVertex2d(1125,550);
    glVertex2d(1125,600);
    glVertex2d(1000,600);
    glEnd();
    //4
    glBegin(GL_POLYGON);
    glVertex2d(1175,550);
    glVertex2d(1300,550);
    glVertex2d(1300,600);
    glVertex2d(1175,600);
    glEnd();
    //5
    glBegin(GL_POLYGON);
    glVertex2d(1000,450);
    glVertex2d(1125,450);
    glVertex2d(1125,500);
    glVertex2d(1000,500);
    glEnd();
    //6
    glBegin(GL_POLYGON);
    glVertex2d(1175,450);
    glVertex2d(1300,450);
    glVertex2d(1300,500);
    glVertex2d(1175,500);
    glEnd();

}

void gamedisp22(){
    drawNumber(1,1050,675,0,.5);
    drawNumber(2,1220,675,0,.5);
    drawNumber(3,1050,575,0,.5);
    drawNumber(4,1220,575,0,.5);
    drawNumber(5,1050,475,0,.5);
    drawNumber(6,1220,475,0,.5);
    drawText("SELECT NUMBER",1015,720,0,.5);
    drawText("SELECT NUMBER",1016,720,0,.5);
    drawText("SELECT NUMBER",1017,720,0,.5);
}

void gamedisp31(int a,int b,int q){
    drawText("SCORE",1000,300,0,1.5);
    drawText("SCORE",1001,300,0,1.5);
    drawText("SCORE",1002,300,0,1.5);
    drawNumber(a,950,150,0,2);
    if(b){
        drawText("TARGET",950,50,0,.75);
        drawText("TARGET",951,50,0,.75);
        drawText("TARGET",952,50,0,.75);
        drawNumber(q,1100,50,0,1.5);
    }
}

void gamedisp1(){

    glColor3f((float)rand()/(float)RAND_MAX/0.2,(float)rand()/(float)RAND_MAX/0.2,(float)rand()/(float)RAND_MAX/0.2);
    glBegin(GL_POLYGON);
    glVertex2d(0,0);
    glVertex2d(930,0);
    glVertex2d(930,sh);
    glVertex2d(0,sh);
    glEnd();
    glColor3f(1,1,1);
    gamedisp11();
}

void gamedisp2(){

    glColor3f(1,0,0);
    glBegin(GL_POLYGON);
    glVertex2d(930,400);
    glVertex2d(sw,400);
    glVertex2d(sw,sh);
    glVertex2d(930,sh);
    glEnd();
    glColor3f(0,0,0);
    gamedisp21();
    glColor3f(1,1,1);
    gamedisp22();
}

void gamedisp3(){

    glColor3f(0,.5,0);
    glBegin(GL_POLYGON);
    glVertex2d(930,0);
    glVertex2d(sw,0);
    glVertex2d(sw,400);
    glVertex2d(930,400);
    glEnd();
    glColor3f(1,1,1);
    gamedisp31(score,o,target+1);

}

void gamedispmain(){

    glClear(GL_COLOR_BUFFER_BIT);
    gamedisp1();
    gamedisp2();
    gamedisp3();
    glutSwapBuffers();

}

void action(int n){
    int c=ran();
    switch(n){
    case 1:
            anim(c,1);
            cout<<c<<" & 1\n";
            break;
    case 2:
            anim(c,2);
            cout<<c<<" & 2\n";
            break;
    case 3:
            anim(c,3);
            cout<<c<<" & 3\n";
            break;
    case 4:
            anim(c,4);
            cout<<c<<" & 4\n";
            break;
    case 5:
            anim(c,5);
            cout<<c<<" & 5\n";
            break;
    case 6:
            anim(c,6);
            cout<<c<<" & 6\n";
            break;
    default:
            cout<<"Invalid\n";
    }

    if(c!=n){
        out=0;
        if(!o){
            p[o]+=n;
            stat[i]=n;
            i++;
            bc++;
            if(bc==31){
                out=1;
                bc=0;
                target=p[0];
                stat[i]=7;
                if(o==0)
                    score=0;
                o++;
            }

        }
        else
            p[o]+=c;
        score=p[o];

        if(o && p[1]>p[0]){
            cout<<"Game Over p2 won";
            w2++;
            for(int j=0;j<=i;j++) cout<<stat[j];
        }
    }
    else{
        out=1;
        bc=0;
        target=p[0];
        stat[i]=7;
        if(o==0)
            score=0;
        o++;
    }
    if(o){
        if(o>1&&p[0]>p[1]){
            cout<<"Game Over p1 won";
            w1++;
            for(int j=0;j<=i;j++) cout<<stat[j];
        }
        if(o>1&&p[0]==p[1]){
            cout<<"Game Over draw";
            w3++;
            for(int j=0;j<=i;j++) cout<<stat[j];
        }
    }

}

void mouse(int btn,int state,int x,int y){
    if(btn==GLUT_LEFT_BUTTON && state==GLUT_DOWN){
            if(!w1&&!w2&&!w3){
            y=(sh-y);
            if((x<=1125)&&(x>=1000)){
                if((y<=700)&&(y>=650))
                    action(1);
                else if((y<=600)&&(y>=550))
                    action(3);
                else if((y<=500)&&(y>=450))
                    action(5);
            }
            if((x<=1300)&&(x>=1175)){
                if((y<=700)&&(y>=650))
                    action(2);
                else if((y<=600)&&(y>=550))
                    action(4);
                else if((y<=500)&&(y>=450))
                    action(6);
            }
        }
    }
    if(btn==GLUT_RIGHT_BUTTON && state==GLUT_DOWN && e){
        cout<<"Cant quit";
        exit(0);
    }
}

void keyboard(unsigned char key, int x, int y){
    switch(key){
    case 27:
            cout<<"Exiting game\n";
            exit(0);
            break;
    case 32 :
            if(e)
                exit(0);
            else{
                cout<<"Cant quit";
                break;
            }
    default:
                cout<<"Invalid";
    }
}

void reshape(int w, int h){
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode (GL_PROJECTION);
    glLoadIdentity ();
    gluOrtho2D (0.0, (GLdouble) w, 0.0, (GLdouble) h);
}

void myinit(){
    LoadGameGLTextures();
    glEnable(GL_TEXTURE_2D);
    glClearColor(1.0,1.0,1.0,1.0);
    glPointSize(1.0);
    glShadeModel(GL_SMOOTH);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,sw,0.0,sh);
}

int main( int argc,char **argv){
    glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInitWindowSize(sw,sh);
	glutInitWindowPosition(0,0);
	glutCreateWindow("Combo");
	myinit();
	glutDisplayFunc(gamedispmain);
	glutMouseFunc(mouse);
	glutKeyboardFunc(keyboard);
	glutReshapeFunc(reshape);
	glutFullScreen();
    glutMainLoop();
    return 0;
}
